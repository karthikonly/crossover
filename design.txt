Objective: Create the architecture and design of a Customer Support ticketing system. Implement the system's services and applications.

Prerequisites: RoR + REST API + MySQL + Bootstrap + JS (??)
JS: React (or ember)
JS Testing: Jasmine (Qunit/Karma)

Requirements/Use Cases:

Customer Portal
- Sign up
- Sign in
- List of Support Requests (list)
- Create Support Request (create) (create support log)
- Provide Additional information (update) (create support log)
- Status of each request (show)
- No Delete

Support Agent Portal
- Sign in
- No Sign up
- List of Support Requests (list, filters: status, created_at, updated_at)
- Status of each request (show)
- Process to each request (update) (create support log)
- No Delete
- No Create
- Report Generation (list of all tickets closed last month)

Admin User
- Support Agents: List, Show, Create, Update, Delete
- Customers: List, Show, Update, Delete (No Create)
- Support Requests: List, Show, Update, Delete (No Create). List, Create, Delete Support Log
- Products on Support Request
- Other Configurations:
- Reapers to delete old requests

High Level Design:
Models: Roles, User, SupportRequest, Products (on support request), SupportLogs
States of SupportRequest: Requested, InProgress, NeedsInformation, Closed, Deleted
Seed Data: all 3 roles, SR in all modes.
Json Endpoints as well as html end points
Authentication + Authorization
Each View is a React JS SPA with operations supported

Model Design (all have created_at, updated_at, index on id, foreign key):
Roles: name: Admin, Customer, Agent - done
User: email, name, password, role_id - done
RequestState: name: Requested, InProgress, NeedsInformation, Closed, Deleted - done
Product: name - done
SupportRequest: title, creator:user, lastAgent:user, product, requestState, many SupportLogs - done
SupportLog: SupportRequest, agent, content - done