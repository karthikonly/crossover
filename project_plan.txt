cross over project - original estimate - 30 hours
spent: 
mar24: 10:30 pm - 12:45 pm - 2.25 hrs
mar25: 10:30 am - 11:00 am - 0.50 hrs
     : 11:30 am - 01:00 pm - 1.50 hrs
     : 01:50 pm - 04:20 pm - 2.50 hrs

todo:
steps breakup - done
read requirements - done
use cases - done
high level design - done
research js client - done
model/db design - done


rails new project - done
git initialize - done
integrate mysql - done
database.yml - done
favicon - done
coding - rb:models - done
coding - rb:seeds:basic - done
integrate bootstrap - done
coding - rb:routes:basic- done
coding - rb:controllers:basic - done
integrate devise:basic - done
sign in and signout page - done
coding: rb:seed:supportlog/supportrequest - done

finish user flow - done :::
controller: create new controller - done
ui: fix drop downs for product selection - done
ui: show page shows all the support logs for support request - done
accept nested attributes (different way) - done 
- Sign up - done
- Sign in - done
- List of Support Requests (list) - done
- Create Support Request (create) (create support log) - done
- Provide Additional information (update) (only create support log) - done
- Status of each request (show) - done
- No Delete - done

coding rb:seed:more customers, more agents
finish agent flow - ongoing :::
- Sign in - done
- No Sign up - done
- List of Support Requests (list) - ongoing
- Status of each request (show) - ongoing
- Process to each request (update) (create support log, change status) - ongoing
- No Delete - done
- No Create - done
- Report Generation (list of all tickets closed last month) - #TODO

fix application.html.erb for customer/agent/admin menu
finish admin flow

devise views: prevent self user deletion
add pagination to all index pages

routes/controllers/APIs design
API with devise, use API token
API of support request should include support logs
security design

integrate mailer
integrate PDF creator

rampup react (or ember)
integrate react
js:view design
coding - js:views:user - request: list, create, show/update
coding - js:views:agent - request: list (filters: status, created_at, updated_at), show/udpate, pdf generate
coding - js:views:admin - products crud, requests crud, users crud


test code - rb:rspec (models + controllers)
test code - js:jasmine

create comments throughout the code
security evaluation
error handling
beautification/css fixes
end to end testing

create readme with info in the pdf
create uml diagram for the project
create design document with info in the pdf (embed uml screenshots)
create sql data file dump of seed data required
create video file with demo of all the screens
package the product as per specifications (readme, design, demo video, sql, code)

optional: integrate cancan - ongoing
optional: cucumber testing
